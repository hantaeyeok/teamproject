package com.project.ctrl;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.project.biz.ProductQnaService;
import com.project.domain.ProductQna;

@Controller
@RequestMapping("/productQna/")
public class ProductQnaController {
    
	private static final Logger log = LoggerFactory.getLogger(ProductController.class);

	
    @Autowired
    private ProductQnaService productQnaService;
    
    @Autowired
    private HttpSession session;

    @GetMapping("getProductQnaList.do")
    public String getProductQnaList(@RequestParam("pno") int pno, Model model) {
        List<ProductQna> productQnaList = productQnaService.getProductQnaList(pno);
        model.addAttribute("productQnaList", productQnaList);
        return "productQna/getProductQnaList";
    }

    @GetMapping("getProductQna.do")
    public String detail(@RequestParam("no") int no, Model model) {
        ProductQna productQna = productQnaService.getProductQna(no);
        String sid = (String) session.getAttribute("sid");
        List<ProductQna> answerList = productQnaService.getAnswers(no);
        model.addAttribute("productQna", productQna);
        model.addAttribute("answerList", answerList);
        model.addAttribute("sid", sid);
        return "productQna/getProductQna";
    }

    @GetMapping("insProductQna.do")
    public String insProductQna(Model model, @RequestParam("pno") int pno) {
        ProductQna productQna = new ProductQna();
        productQna.setPno(pno);
        model.addAttribute("productQna", productQna);
        return "productQna/insProductQna";
    }

    @PostMapping("insProductQna.do")
    public String insProProductQna(
                                   @RequestParam("qimg1") MultipartFile qimg1,
                                   @RequestParam("qimg2") MultipartFile qimg2,
                                   @RequestParam("title") String title,
                                   @RequestParam("content") String content,
                                   
                                   HttpServletRequest request) {
        String uploadDir = request.getServletContext().getRealPath("/resources/upload/");
        File dir = new File(uploadDir);

        ProductQna productQna = new ProductQna();
        if (!dir.exists()) {
            dir.mkdirs();
        }

        try {
            if (!qimg1.isEmpty()) {
                String qimg1Name = saveFile(qimg1, uploadDir);
                productQna.setQimg1(qimg1Name);
            }
            if (!qimg2.isEmpty()) {
                String qimg2Name = saveFile(qimg2, uploadDir);
                productQna.setQimg2(qimg2Name);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String id = (String) session.getAttribute("sid");
        String name = (String) session.getAttribute("sname");
        productQna.setId(id);
        productQna.setName(name);
        productQna.setContent(content);
        productQna.setTitle(title);
        productQnaService.insProductQna(productQna);
        return "redirect:/productQna/getProductQnaList.do?pno=" + productQna.getPno();
    }

    @GetMapping("upProductQna.do")
    public String upProductQna(@RequestParam("no") int no, Model model) {
        ProductQna productQna = productQnaService.getProductQna(no);
        model.addAttribute("productQna", productQna);
        return "productQna/upProductQna";
    }

    @PostMapping("upProductQna.do")
    public String upProProductQna(@ModelAttribute ProductQna productQna, 
                                  @RequestParam("qimg1") MultipartFile qimg1,
                                  @RequestParam("qimg2") MultipartFile qimg2,
                                  HttpServletRequest request) {
        String uploadDir = request.getServletContext().getRealPath("/resources/upload/");
        File dir = new File(uploadDir);

        if (!dir.exists()) {
            dir.mkdirs();
        }

        try {
            if (!qimg1.isEmpty()) {
                String qimg1Name = saveFile(qimg1, uploadDir);
                productQna.setQimg1(qimg1Name);
                log.info("업로드 파일1 이름 : {}", qimg1Name);
            }
            if (!qimg2.isEmpty()) {
                String qimg2Name = saveFile(qimg2, uploadDir);
                productQna.setQimg2(qimg2Name);
                log.info("업로드 파일2 이름 : {}", qimg2Name);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        productQnaService.upProductQna(productQna);
        return "redirect:/productQna/getProductQna.do?no=" + productQna.getNo();
    }

    @GetMapping("delProductQna.do")
    public String delete(@RequestParam("no") int no, @RequestParam("pno") int pno) {
        productQnaService.delProductQna(no);
        return "redirect:/productQna/getProductQnaList.do?pno=" + pno;
    }

    @GetMapping("insAnswer.do")
    public String insProductQnaAnswerForm(@RequestParam("parno") int parno, Model model) {
        model.addAttribute("parno", parno);
        return "productQna/insProductQnaAnswer";
    }

    @PostMapping("insAnswer.do")
    public String insProductQnaAnswer(@ModelAttribute ProductQna productQna, 
                                      @RequestParam("pimg1") MultipartFile pimg1,
                                      @RequestParam("pimg2") MultipartFile pimg2,
                                      HttpServletRequest request) {
        String uploadDir = request.getServletContext().getRealPath("/resources/upload/");
        File dir = new File(uploadDir);

        if (!dir.exists()) {
            dir.mkdirs();
        }

        try {
            if (!pimg1.isEmpty()) {
                String pimg1Name = saveFile(pimg1, uploadDir);
                productQna.setPimg1(pimg1Name);
            }
            if (!pimg2.isEmpty()) {
                String pimg2Name = saveFile(pimg2, uploadDir);
                productQna.setPimg2(pimg2Name);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String sid = (String) session.getAttribute("sid");
        if ("admin".equals(sid)) {
            productQna.setId(sid);
            productQnaService.insProductQna(productQna);
        }

        return "redirect:/productQna/getProductQna.do?no=" + productQna.getParno();
    }

    private String saveFile(MultipartFile file, String uploadDir) throws IOException {
        String originalFilename = file.getOriginalFilename();
        String newFilename = UUID.randomUUID().toString() + "_" + originalFilename;
        File serverFile = new File(uploadDir + newFilename);
        file.transferTo(serverFile);
        return newFilename;
    }
}

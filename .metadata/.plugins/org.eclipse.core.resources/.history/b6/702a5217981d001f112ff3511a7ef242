<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
"-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="qna">

    <!-- 모든 Q&A 목록 조회 (계층적 구조 반영) -->
    <select id="getQnaList" resultType="com.company.dto.Qna">
        WITH RECURSIVE list AS (
            SELECT no, plevel, parno, title, content, resdate, hits, id, name
            FROM qna
            WHERE parno = 0 
            UNION ALL
            SELECT q.no, q.plevel, q.parno, q.title, q.content, q.resdate, q.hits, q.id, q.name 
            FROM qna q
            JOIN list l ON q.parno = l.no 
        )
        SELECT * FROM list
        ORDER BY no ASC; 
    </select>
    
    <!-- 특정 Q&A 조회 -->
    <select id="getQna" parameterType="int" resultType="com.company.dto.Qna">
        SELECT no, plevel, parno, title, content, resdate, hits, id, name
        FROM qna 
        WHERE no = #{no}
    </select>
   
    <!-- 새로운 Q&A 추가 -->
    <insert id="insQna" parameterType="com.company.dto.Qna">
        INSERT INTO qna (plevel, parno, title, content, resdate, hits, id, name)
        VALUES (#{plevel}, #{parno}, #{title}, #{content}, CURRENT_TIMESTAMP, #{hits}, #{id}, #{name})
    </insert>

    <!-- 기존 Q&A 수정 -->
    <update id="upQna" parameterType="com.company.dto.Qna">
        UPDATE qna
        SET title = #{title}, content = #{content}, resdate = CURRENT_TIMESTAMP, hits = #{hits}, id = #{id}, name = #{name}
        WHERE no = #{no}
    </update>
    
    <!-- Q&A 삭제 -->
    <delete id="delQna" parameterType="int">
        DELETE FROM qna WHERE no = #{no}
    </delete>
    
    <!-- 답변 삭제 -->
    <delete id="delAnswers" parameterType="int">
        DELETE FROM qna WHERE parno = #{no}
    </delete>

    <!-- 부모 Q&A의 plevel 조회 -->
    <select id="getPlevel" parameterType="int" resultType="int">
        SELECT plevel FROM qna WHERE no = #{no}
    </select>

    <!-- 특정 부모 Q&A에 대한 답변 목록 조회 -->
    <select id="getAnswers" parameterType="int" resultType="com.company.dto.Qna">
        SELECT no, plevel, parno, title, content, resdate, hits, id, name
        FROM qna 
        WHERE parno = #{parno} 
        ORDER BY no ASC
    </select>
    
    <!-- 조회수 증가 -->
    <update id="vcntCount" parameterType="int">
        UPDATE qna SET hits = hits + 1 WHERE no = #{no}
    </update>
    
</mapper>

<!-- 
CTE 정의:

WITH RECURSIVE list AS 구문으로 list라는 이름의 재귀적 CTE를 정의합니다.
앵커 멤버 (Anchor Member):

SELECT no, plevel, parno, title, content, resdate, hits, id, name FROM qna WHERE parno = 0
parno가 0인 레코드를 선택하여 트리 구조의 시작점을 설정합니다.
재귀 멤버 (Recursive Member):

UNION ALL SELECT q.no, q.plevel, q.parno, q.title, q.content, q.resdate, q.hits, q.id, q.name FROM qna q JOIN list l ON q.parno = l.no
qna 테이블에서 parno 값이 list CTE의 no 값과 일치하는 레코드를 찾습니다.
이를 통해 자식 노드를 찾고, 찾은 자식 노드를 list CTE에 추가합니다.
최종 선택문:

SELECT * FROM list ORDER BY no ASC
최종적으로 list CTE의 모든 레코드를 선택하고 no 컬럼을 기준으로 오름차순 정렬하여 출력합니다.

 WITH RECURSIVE list AS (
            SELECT no, plevel, parno, title, content, resdate, hits, id, name
            FROM qna
            WHERE parno = 0 -- 시작점 설정
            UNION ALL
            SELECT q.no, q.plevel, q.parno, q.title, q.content, q.resdate, q.hits, q.id, q.name 
            FROM qna q
            JOIN list l ON q.parno = l.no -- 자식 노드를 찾기 위해 자기 자신을 참조하는 JOIN
        )
        SELECT * FROM list
        ORDER BY no ASC; -- 형제 노드의 정렬

 -->

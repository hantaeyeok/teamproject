package com.company.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.company.dto.Product;
import com.company.service.ProductService;

@Controller
@RequestMapping("/product/")
public class ProductController {
	
	private static final Logger log = LoggerFactory.getLogger(ProductController.class);
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private ServletContext servletContext;
	
	@GetMapping("productList.do")
	public String getProductList(Model model) {
	List<Product> productList = productService.getProductList();
	model.addAttribute("productList",productList);
	return "product/productList";
	}
	
	@RequestMapping("getProductCateList.do")
	public String getProductCateList(@RequestParam("cate") String cate,Model model) {
		model.addAttribute("getProductCateList", productService.getProductCateList(cate));
		return "product/getProductCateList";
	}
	
	@GetMapping("getProduct.do")
	public String getProduct() {
		return "product/getProduct";
	}
	
	@GetMapping("insProduct.do")
	public String insProduct(Model model) {
		model.addAttribute("product",new Product());
		return "product/insProduct";
	}
	
//	@PostMapping("insProduct.do")
//	public String inProProduct(
//			@RequestParam("cate") String cate,
//			@RequestParam("pname") String pname,
//			@RequestParam("com") String com,
//			@RequestParam("context") String context,
//			@RequestParam("resdate") Date resdate,
//			@RequestParam("price") int price,
//			@RequestParam("img") MultipartFile img1,
//			@RequestParam("img2") MultipartFile img2,
//			@RequestParam("img3") MultipartFile img3,
//			
//		
//			 Model model) {
//		Product product = new Product();
//		
//		try {
//			String uploadPath = servletContext.getRealPath("/resources/upload"); // 실제 경로
//			File uploadDir = new File(uploadPath);
//			if (!uploadDir.exists()) {
//			uploadDir.mkdirs(); // 업로드 디렉토리가 없으면 생성
//		}
//		
//		if (!img1.isEmpty()) {
//			String fileName1 = UUID.randomUUID().toString() + "_" + img1.getOriginalFilename();
//			File saveFile1 = new File(uploadPath, fileName1);
//			img1.transferTo(saveFile1); // 파일 저장
//			product.setImg1(fileName1);
//		}
//		
//		if (!img2.isEmpty()) {
//			String fileName2 = UUID.randomUUID().toString() + "_" + img2.getOriginalFilename();
//			File saveFile2 = new File(uploadPath, fileName2);
//			img2.transferTo(saveFile2); // 파일 저장
//			product.setImg2(fileName2);
//		}
//		
//		if (!img3.isEmpty()) {
//			String fileName3 = UUID.randomUUID().toString() + "_" + img3.getOriginalFilename();
//			File saveFile3 = new File(uploadPath, fileName3);
//			img3.transferTo(saveFile3); // 파일 저장
//			product.setImg3(fileName3);
//		}
//		
//		} catch (IOException e) {
//			e.printStackTrace();
//			model.addAttribute("message", "파일 업로드 중 오류가 발생했습니다.");
//			return "product/insProduct";
//		}
//		
//		product.setCate(cate);
//		product.setPname(pname);
//		product.setCom(com);
//		product.setContext(context);
//		product.setPrice(price);
//		product.setResdate(new Date());
//	
//		productService.insProduct(product);
//		return "redirect:/product/productList";
//	}
	
	//saveFile 
	public String saveFile(MultipartFile file, String uploadDir) throws IOException {
		String originalFilename = file.getOriginalFilename();
		String newFilename = UUID.randomUUID().toString() + "_" + originalFilename;
		File serverFile = new File(uploadDir + newFilename);
		file.transferTo(serverFile);
		return newFilename;
	}

	
	
	@PostMapping("insProduct.do")
	public String insProductPro(@RequestParam("cate") String cate,
	                            @RequestParam("pname") String pname,
	                            @RequestParam("com") String com,
	                            @RequestParam("context") String context,
	                            
	                            @RequestParam("price") int price,
	                            @RequestParam("img1") MultipartFile img1,
	                            @RequestParam("img2") MultipartFile img2,
	                            @RequestParam("img3") MultipartFile img3,
	                            HttpServletRequest request,
	                            HttpServletResponse response,
	                            Model model) {

	    String uploadDir = request.getServletContext().getRealPath("/resources/upload/");
	    File dir = new File(uploadDir);

	    String img1Name = "", img2Name = "", img3Name = "";

	    if (!dir.exists()) {
	        dir.mkdirs();
	    }

	    try {
	        if (!img1.isEmpty()) {
	            img1Name = saveFile(img1, uploadDir);
	            log.info("업로드 파일1 이름 : {}", img1Name);
	        }
	        if (!img2.isEmpty()) {
	            img2Name = saveFile(img2, uploadDir);
	            log.info("업로드 파일2 이름 : {}", img2Name);
	        }
	        if (!img3.isEmpty()) {
	            img3Name = saveFile(img3, uploadDir);
	            log.info("업로드 파일3 이름 : {}", img3Name);
	        }
	    } catch (IOException e) {
	        log.error("예외 : {}", e);
	    }

	    Product product = new Product();
	    product.setCate(cate);
	    product.setPname(pname);
	    product.setCom(com);
	    product.setContext(context);
	    
	    product.setPrice(price);
	    product.setResdate(new Date());
	    product.setImg1(img1Name);
	    product.setImg2(img2Name);
	    product.setImg3(img3Name);

	    productService.insProduct(product);
	    return "redirect:productList.do";
	}

	
	
	
	@GetMapping("upProduct.do")
	public String upProduct() {
		return "product/upProduct";
	}
	
//	@PostMapping("upProduct.do")
//	public String upProProduct(
//			@RequestParam("pno") int pno,
//			@RequestParam("cate") String cate,
//			@RequestParam("pname") String pname,
//			@RequestParam("com") String com,
//			@RequestParam("price") int price,
//			@RequestParam("context") String context,
//			@RequestParam("resdate") Date resdate,
//			@RequestParam("price") int price,
//			@RequestParam("img") MultipartFile img1,
//			@RequestParam("img2") MultipartFile img2,
//			@RequestParam("img3") MultipartFile img3,
//			Model model
//			) {
//		
//		Product before = productService.getProduct(pno);
//		String uploadPath = servletContext.getRealPath("/resources/upload"); // 실제 경로
//		File uploadDir = new File(uploadPath);
//		
//		String imgName="", img2Name="", img3Name="";
//		try {
//			if(!img1.isEmpty()) {
//				imgName = saveFile(img1, uploadDir);
//				log.info("변경 파일1 이름 : {}", imgName);
//			} else {
//				imgName = before.getImg1();
//			}
//			if(!img2.isEmpty()) {
//				img2Name = saveFile(img2, uploadDir);
//				log.info("변경 파일2 이름 : {}", img2Name);
//			} else {
//				img2Name = before.getImg2();
//			}
//			if(!img3.isEmpty()) {
//				img3Name = saveFile(img3, uploadDir);
//				log.info("변경 파일3 이름 : {}", img3Name);
//			} else {
//				imgName = before.getImg3();
//			}
//		} catch (IOException e) {
//			log.error("예외 : {}", e);
//		}
//		
//		Product product = new Product();
//		product.setCate(cate);
//		product.setPname(pname);
//		product.setCom(com);
//		product.setContext(context);
//		product.setPrice(price);
//		
//		productService.upProduct(product);
//		return "product/productList.do";
//	}

	@PostMapping("upProduct.do")
	public String upProductPro(@RequestParam("pno") int pno,
	                           @RequestParam("cate") String cate,
	                           @RequestParam("pname") String pname,
	                           @RequestParam("com") String com,
	                           @RequestParam("price") int price,
	                           @RequestParam("context") String context,
	                           
	                           @RequestParam("img") MultipartFile img,
	                           @RequestParam("img2") MultipartFile img2,
	                           @RequestParam("img3") MultipartFile img3,
	                           HttpServletRequest request,
	                           HttpServletResponse response,
	                           Model model) {
	    
	    Product before = productService.getProduct(pno);
	    
	    String uploadDir = request.getServletContext().getRealPath("/resources/upload/");
	    File dir = new File(uploadDir);
	    
	    String img1Name = "", img2Name = "", img3Name = "";
	    
	    if (!dir.exists()) {
	        dir.mkdirs();
	    }
	    
	    try {
	        if (!img.isEmpty()) {
	            img1Name = saveFile(img, uploadDir);
	            log.info("변경 파일1 이름 : {}", img1Name);
	        } else {
	            img1Name = before.getImg1();
	        }
	        if (!img2.isEmpty()) {
	            img2Name = saveFile(img2, uploadDir);
	            log.info("변경 파일2 이름 : {}", img2Name);
	        } else {
	            img2Name = before.getImg2();
	        }
	        if (!img3.isEmpty()) {
	            img3Name = saveFile(img3, uploadDir);
	            log.info("변경 파일3 이름 : {}", img3Name);
	        } else {
	            img3Name = before.getImg3();
	        }
	    } catch (IOException e) {
	        log.error("예외 : {}", e);
	    }
	    
	    Product product = new Product();
	    product.setPno(pno);  // 수정 시 제품 번호가 필요합니다
	    product.setCate(cate);
	    product.setPname(pname);
	    product.setCom(com);
	    product.setContext(context);
	    product.setPrice(price);
	    product.setImg1(img1Name);
	    product.setImg2(img2Name);
	    product.setImg3(img3Name);
	    
	    productService.upProduct(product);
	    return "redirect:list.do";
	}


	
	
	
	@RequestMapping("delProduct.do")
	public String delProduct(@RequestParam("pno") int pno, Model model) {
		productService.delProduct(pno);
		return "redirect:productList.do";
	}
}

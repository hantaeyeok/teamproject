package com.company.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.company.dto.Product;
import com.company.service.ProductService;

@Controller
@RequestMapping("/product/")
public class ProductController {
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private ServletContext servletContext;
	
	@GetMapping("productList.do")
	public String getProductList(Model model) {
	List<Product> productList = productService.getProductList();
	model.addAttribute("productList",productList);
	return "product/productList";
	}
	
	@RequestMapping("getProductCateList.do")
	public String getProductCateList(@RequestParam("cate") String cate,Model model) {
		model.addAttribute("getProductCateList", productService.getProductCateList(cate));
		return "product/getProductCateList";
	}
	
	@GetMapping("insProduct.do")
	public String insProduct(Model model) {
		model.addAttribute("product",new Product());
		return "product/insProduct";
	}
	
	@PostMapping("insProduct")
	public String inProProduct(
			@RequestParam("cate") String cate,
			@RequestParam("pname") String pname,
			@RequestParam("com") String com,
			@RequestParam("context") String context,
			@RequestParam("resdate") Date resdate,
			@RequestParam("price") int price,
			@RequestParam("img") MultipartFile img1,
			@RequestParam("img2") MultipartFile img2,
			@RequestParam("img3") MultipartFile img3,
			
		
			 Model model) {
		Product product = new Product();
		
		try {
			String uploadPath = servletContext.getRealPath("/resources/upload"); // 실제 경로
			File uploadDir = new File(uploadPath);
			if (!uploadDir.exists()) {
			uploadDir.mkdirs(); // 업로드 디렉토리가 없으면 생성
		}
		
		if (!img1.isEmpty()) {
			String fileName1 = UUID.randomUUID().toString() + "_" + img1.getOriginalFilename();
			File saveFile1 = new File(uploadPath, fileName1);
			img1.transferTo(saveFile1); // 파일 저장
			product.setImg1(fileName1);
		}
		
		if (!img2.isEmpty()) {
			String fileName2 = UUID.randomUUID().toString() + "_" + img2.getOriginalFilename();
			File saveFile2 = new File(uploadPath, fileName2);
			img2.transferTo(saveFile2); // 파일 저장
			product.setImg2(fileName2);
		}
		
		if (!img3.isEmpty()) {
			String fileName3 = UUID.randomUUID().toString() + "_" + img3.getOriginalFilename();
			File saveFile3 = new File(uploadPath, fileName3);
			img3.transferTo(saveFile3); // 파일 저장
			product.setImg3(fileName3);
		}
		
		} catch (IOException e) {
			e.printStackTrace();
			model.addAttribute("message", "파일 업로드 중 오류가 발생했습니다.");
			return "product/insProduct";
		}
		
		product.setCate(cate);
		product.setPname(pname);
		product.setCom(com);
		product.setContext(context);
		product.setPrice(price);
		product.setResdate(new Date());
	
		productService.insProduct(product);
		return "redirect:/product/productList";
	}
	
	@GetMapping("getProduct")
	
}
